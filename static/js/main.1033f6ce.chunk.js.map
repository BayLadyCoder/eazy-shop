{"version":3,"sources":["state/actions.ts","components/CartItem/CartItem.styles.ts","components/CartItem/CartItem.tsx","components/Cart/Cart.styles.ts","components/Cart/Cart.tsx","App.styles.ts","components/Item/Item.styles.ts","components/Item/Item.tsx","App.tsx","state/reducers.ts","index.tsx"],"names":["API_GET_ALL_PRODUCTS_SUCCESS","ADD_ITEM_TO_CART","REMOVE_ITEM_FROM_CART","addToCart","item","type","payload","Wrapper","styled","div","CartItem","dispatch","useDispatch","imgURL","image","slice","title","className","price","amount","toFixed","Button","size","disableElevation","variant","onClick","id","src","alt","aside","Cart","cartItems","length","map","StyledButton","IconButton","Item","description","App","useState","isCartOpen","setIsCartOpen","products","useSelector","state","items","cart","useEffect","a","fetch","res","json","data","console","log","message","Drawer","anchor","open","onClose","Badge","badgeContent","reduce","acc","getTotalItems","color","Grid","container","spacing","xs","sm","LinearProgress","ProductInitialState","isLoading","CartInitialState","rootReducer","combineReducers","action","newStateItems","isItemInCart","find","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1033f6ce.chunk.js","sourcesContent":["import { ThunkAction } from 'redux-thunk'\nimport { Action } from 'redux'\n\n// Types\nimport { CartItemType, AppState } from '../Types'\n\n// Action Types\nexport const API_GET_ALL_PRODUCTS_SUCCESS: string = \"API_GET_ALL_PRODUCTS_SUCCESS\";\nexport const API_GET_ALL_PRODUCTS_FAIL: string = \"API_GET_ALL_PRODUCTS_FAIL\";\nexport const ADD_ITEM_TO_CART: string = \"ADD_ITEM_TO_CART\";\nexport const REMOVE_ITEM_FROM_CART: string = \"REMOVE_ITEM_FROM_CART\";\n\n\n\nexport const addToCart = (item: CartItemType) => ({\n    type: ADD_ITEM_TO_CART,\n    payload: item\n})\n\nexport const removeItemFromCart = (id: number) => ({\n    type: REMOVE_ITEM_FROM_CART,\n    payload: id\n})\n\n\n\n// API calls\nexport const apiGetAllProducts = (): ThunkAction<void, AppState, unknown, Action<string>> => async (dispatch) => {\n\n    try {\n        const res = await fetch(\"https://fakestoreapi.herokuapp.com/products\");\n        const data: CartItemType[] = await res.json();\n        dispatch({ type: API_GET_ALL_PRODUCTS_SUCCESS, payload: data })\n    } catch (error) {\n        console.log(error.message)\n        // return ({ type: API_GET_ALL_PRODUCTS_FAIL, payload: error })\n\n    }\n\n};","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    display:flex;\n    justify-content: space-between;\n    font-family:Arial, Helvetica, sans-serif;\n    border-bottom: 1px solid lightblue;\n    padding-bottom: 20px;\n\n    h3 {\n        font-size: 18px;\n    }\n\n    div {\n        flex: 1;\n    }\n\n    .information, .buttons {\n        display:flex;\n        justify-content:space-between;\n\n    }\n\n    .button {\n        font-size:17px;\n    }\n\n    img {\n        max-width: 100px;\n        object-fit: contain;\n        margin-left: 40px;\n    }\n`;\n","import Button from \"@material-ui/core/Button\";\nimport { CartItemType } from \"../../Types\";\nimport { Wrapper } from \"./CartItem.styles\";\nimport { useDispatch } from \"react-redux\";\n\nimport { addToCart, removeItemFromCart } from \"../../state/actions\";\n\ntype Props = {\n  item: CartItemType;\n};\n\nconst CartItem: React.FC<Props> = ({ item }) => {\n  const dispatch = useDispatch();\n\n  const imgURL: string =\n    item.image.slice(0, 21) + \"herokuapp.\" + item.image.slice(21);\n\n  return (\n    <Wrapper>\n      <div>\n        <h3>{item.title}</h3>\n        <div className=\"information\">\n          <p>Price: ${item.price}</p>\n          <p>Total: ${(item.price * item.amount).toFixed(2)}</p>\n        </div>\n        <div className=\"buttons\">\n          <Button\n            className=\"button\"\n            size=\"small\"\n            disableElevation\n            variant=\"contained\"\n            onClick={() => dispatch(removeItemFromCart(item.id))}\n          >\n            -\n          </Button>\n          <p>{item.amount}</p>\n          <Button\n            className=\"button\"\n            size=\"small\"\n            disableElevation\n            variant=\"contained\"\n            onClick={() => dispatch(addToCart(item))}\n          >\n            +\n          </Button>\n        </div>\n      </div>\n      <img src={imgURL} alt={item.title} />\n    </Wrapper>\n  );\n};\n\nexport default CartItem;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.aside`\n  font-family: Arial, Helvetica, sans-serif;\n  width: 320px;\n  padding: 20px;\n`;\n","import CartItem from \"../CartItem/CartItem\";\nimport { Wrapper } from \"./Cart.styles\";\nimport { CartItemType } from \"../../Types\";\n\ntype Props = {\n  cartItems: CartItemType[];\n};\n\nconst Cart: React.FC<Props> = ({ cartItems }) => {\n  return (\n    <Wrapper>\n      <h2>Your Shopping Cart</h2>\n      {cartItems.length > 0 ? (\n        cartItems.map((item) => <CartItem key={item.id} item={item} />)\n      ) : (\n        <p>Cart is empty.</p>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Cart;\n","import styled from 'styled-components'\nimport IconButton from \"@material-ui/core/IconButton\";\n\nexport const Wrapper = styled.div`\n    margin: 0px 30px 30px 30px;\n\n    h1{\n        text-align:center;\n    }\n`;\n\nexport const StyledButton = styled(IconButton)`\n    position:fixed !important;\n    z-index: 100;\n    right: 30px;\n    top: 20px;\n\n\n`;","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    flex-direction: column;\n    width:100%;\n    border: 1px solid #cccccc;\n    border-radius: 20px;\n    height: 100%;\n    color: #383838;\n\n    button {\n        border-radius: 0 0 20 20px;\n        font-weight: bold;\n        color: #0a56c7;\n        background-color: #f2f8ff;\n    }\n    button:hover {\n        color: #005bc4;\n        background-color: #dbeaff;\n    }\n\n    img {\n        margin-top: 1.5rem;\n        max-height: 200px;\n        object-fit: contain;\n        border-radius: 20px 20px 0 0;\n    }\n    \n    div {\n        font-family: Arial, Helvetica, sans-serif;\n        padding: 1.5rem;\n        height: 100%\n    }\n`;","import { useDispatch } from \"react-redux\";\nimport Button from \"@material-ui/core/Button\";\nimport { addToCart } from \"../../state/actions\";\n// Types\nimport { CartItemType } from \"../../Types\";\n\n// Styles\nimport { Wrapper } from \"./Item.styles\";\n\ntype Props = {\n  item: CartItemType;\n  // handleAddToCart: (item: CartItemType) => void;\n};\n\nconst Item: React.FC<Props> = ({ item }) => {\n  const dispatch = useDispatch();\n\n  const imgURL = item.image.slice(0, 21) + \"herokuapp.\" + item.image.slice(21);\n  return (\n    <Wrapper>\n      <img src={imgURL} alt={item.title} />\n      <div>\n        <h3>{item.title}</h3>\n        <p>{item.description}</p>\n        <h3>${item.price}</h3>\n      </div>\n      <Button onClick={() => dispatch(addToCart(item))}>Add to Cart</Button>\n    </Wrapper>\n  );\n};\n\nexport default Item;\n","import { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { apiGetAllProducts } from \"./state/actions\";\n// Components\nimport Drawer from \"@material-ui/core/Drawer\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Grid from \"@material-ui/core/Grid\";\nimport AddShoppingCartIcon from \"@material-ui/icons/AddShoppingCart\";\nimport Badge from \"@material-ui/core/Badge\";\nimport Cart from \"./components/Cart/Cart\";\n// Styles\nimport { StyledButton, Wrapper } from \"./App.styles\";\nimport Item from \"./components/Item/Item\";\n//Types\nimport { CartItemType, AppState } from \"./Types\";\n\nconst App: React.FC = () => {\n  const [isCartOpen, setIsCartOpen] = useState<boolean>(false);\n  const products = useSelector((state: AppState) => state.products.products);\n  const items = useSelector((state: AppState) => state.cart.items);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(apiGetAllProducts());\n  }, [dispatch]);\n\n  const getTotalItems = (items: CartItemType[]) =>\n    items.reduce((acc: number, item) => acc + item.amount, 0);\n\n  if (!items) return <LinearProgress />;\n\n  return (\n    <Wrapper>\n      <h1>Shopping App</h1>\n      <Drawer\n        anchor=\"right\"\n        open={isCartOpen}\n        onClose={() => setIsCartOpen(false)}\n      >\n        <Cart cartItems={items} />\n      </Drawer>\n      <StyledButton onClick={() => setIsCartOpen(true)}>\n        <Badge badgeContent={getTotalItems(items)} color=\"error\">\n          <AddShoppingCartIcon />\n        </Badge>\n      </StyledButton>\n      <Grid container spacing={3}>\n        {products?.map((item: CartItemType) => (\n          <Grid item key={item.id} xs={12} sm={4}>\n            <Item item={item} />\n          </Grid>\n        ))}\n      </Grid>\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport {\n    API_GET_ALL_PRODUCTS_SUCCESS,\n    // API_GET_ALL_PRODUCTS_FAIL,\n    ADD_ITEM_TO_CART,\n    REMOVE_ITEM_FROM_CART,\n} from './actions'\n\n// Types\nimport { CartItemType, ProductState, CartState, Actions } from '../Types'\n\n\nconst ProductInitialState = {\n    products: [],\n    isLoading: true\n}\nconst CartInitialState = {\n    items: [],\n}\n\n\n\nexport const productReducer = (state: ProductState = ProductInitialState, action: Actions): ProductState => {\n    const { type, payload } = action;\n\n    switch (type) {\n        case API_GET_ALL_PRODUCTS_SUCCESS:\n            return { products: payload, isLoading: false }\n        default:\n            return state\n\n    }\n}\n\n\n\nexport const cartReducer = (state: CartState = CartInitialState, action: Actions): CartState => {\n    const { type, payload } = action;\n    let newStateItems: CartItemType[];\n\n    switch (type) {\n        case ADD_ITEM_TO_CART:\n            const isItemInCart = state.items.find((item) => item.id === payload?.id);\n            if (isItemInCart) {\n                newStateItems = state.items.map((item) => {\n                    if (item.id === payload?.id) {\n                        return { ...item, amount: item.amount + 1 };\n                    } else {\n                        return item;\n                    }\n                });\n            } else {\n                newStateItems = [...state.items, { ...payload, amount: 1 }];\n            }\n            return { ...state, items: newStateItems }\n        case REMOVE_ITEM_FROM_CART:\n            newStateItems = state.items.reduce((acc: CartItemType[], item: CartItemType) => {\n                if (item.id === payload) {\n                    if (item.amount === 0) {\n                        return acc;\n                    } else {\n                        return [...acc, { ...item, amount: item.amount - 1 }];\n                    }\n                } else {\n                    return [...acc, item];\n                }\n            }, [] as CartItemType[])\n            return { ...state, items: newStateItems }\n        default:\n            return state\n\n    }\n}\n\n\n\n\n\nconst rootReducer = combineReducers({\n    products: productReducer,\n    cart: cartReducer\n})\n\nexport default rootReducer;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./state/reducers\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}